# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ossi-slack-bot

plugins:
  - serverless-plugin-typescript
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10

# you can overwrite defaults here
#  stage: dev
  region: eu-west-1
  environment:
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
    SLACK_TOKEN: ${env:SLACK_TOKEN}
    MANAGEMENT_CHANNEL: "#ossi-management"

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/os-contributions"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:

  dynamo:
    handler: src/dynamo-frontdoor.query
    events:
      - http:
          path: query
          method: get

  event:
    handler: src/event-handler.handleEvent
    events:
      - http:
          path: event
          method: post
  slash:
    handler: src/slash-command-handler.handleSlashCommand
    events:
      - http:
          path: slash
          method: post

  change-state:
    handler: src/change-state-handler.changeState
    events:
      - http:
          path: state
          method: post

  streamFunction:
    handler: src/status-changes-handler.handleStream
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ ContributionsTable, StreamArn ]

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    ContributionsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: sequence
            AttributeType: N
#          -
#            AttributeName: text
#            AttributeType: S
#          -
#            AttributeName: status
#            AttributeType: S

        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
          -
            AttributeName: sequence
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: os-contributions
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
